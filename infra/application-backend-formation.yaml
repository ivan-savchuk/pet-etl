AWSTemplateFormatVersion: "2010-09-09"
Description: "Resources for Application Backend in pet-etl project. Which includes Lambda, Glue, StepFunctions"

Resources:
  YouTubeParserLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      Tags:
        - Key: "project"
          Value: "pet-etl"
      LogGroupName: "/aws/lambda/youtube-parser"

  YouTubeParserIamRoleLambdaExecution:
    Type: "AWS::IAM::Role"
    Properties:
      Tags:
        - Key: "project"
          Value: "pet-etl"
      Path: "/"
      RoleName: "youtube-parser-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: "S3PutObjectAccess"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub "arn:aws:s3:::pet-etl-raw-data-storage/*"
      - PolicyName: "youtube-parser-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogStream"
            - "logs:CreateLogGroup"
            - "logs:PutLogEvents"
            Resource:
            - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/youtube-parser*:*"

  YouTubeParserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Tags:
        - Key: "project"
          Value: "pet-etl"
      Code:
        S3Bucket: "pet-etl-lambda-code-storage"
        S3Key: "lambda-template.zip"
      FunctionName: "youtube-parser"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 512
      PackageType: "Zip"
      Role: !GetAtt "YouTubeParserIamRoleLambdaExecution.Arn"
      Runtime: "python3.10"
      Timeout: 900
      Environment:
        Variables:
          YOUTUBE_API_KEY: ""
          YOUTUBE_URL: ""
          BUCKET_NAME: ""
          COUNTRY_CODES: ""

  GlueJobYouTubeRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "GlueJobYouTubePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::pet-etl-glue-scripts/*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource: "arn:aws:s3:::pet-etl-raw-data-storage/*"

  GlueJobYouTube:
    Type: "AWS::Glue::Job"
    Properties:
      Name: "GlueJobYouTube"
      Role: !Ref GlueJobYouTubeRole
      GlueVersion: "3.0"
      Command:
        Name: "glueetl"
        ScriptLocation: "s3://pet-etl-glue-scripts/transform_youtube_trends.py"
      DefaultArguments:
        "--job-language": "python"
        "--enable-metrics": ""
        "--enable-continuous-cloudwatch-log": "true"
        "--continuous-log-logGroup": 'aws-glue/job/youtube-trends-transform'
      MaxRetries: 0

  StepFunctionsYooTubeTrendsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "states.amazonaws.com"
                - "lambda.amazonaws.com"
                - "glue.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "StepFunctionsYooTubeTrendsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "glue:StartJobRun"
                Resource: "*"

  StateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Description: "Daily execution of YouTube trends data processing"
    Properties:
      DefinitionString:
        Fn::Sub: |-
          {
            "Comment": "Daily execution of YouTube trends processing",
            "StartAt": "InvokeLambda",
            "States": {
              "InvokeLambda": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:youtube-parser:$LATEST"
                },
                "Next": "InvokeGlueJob"
              },
              "InvokeGlueJob": {
                "Type": "Task",
                "Resource": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:glue:startJobRun",
                "Parameters": {
                  "JobName": "GlueJobYouTube"
                },
                "Next": "Done"
              },
                "Done": {
                    "Type": "Succeed"
                }
            }
          }
      RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/StepFunctionsYooTubeTrendsRole"
      StateMachineName: "DailyYouTubeProcessing"

  InvokeStateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "InvokeStateMachinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:StartExecution"
                Resource: !GetAtt StateMachine.Arn

  EventRule:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(0 20 * * ? *)"
      State: "ENABLED"
      RoleArn: !GetAtt InvokeStateMachineRole.Arn
      Targets:
        - Arn: !GetAtt StateMachine.Arn
          Id: "TargetStateMachine"
          RoleArn: !GetAtt InvokeStateMachineRole.Arn

  PermissionForEventsToInvokeStateMachine:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt YouTubeParserLambda.Arn
      Principal: "states.amazonaws.com"
      SourceArn: !GetAtt StateMachine.Arn
